@using MudBlazor
@using RohanSpeechApp.Interfaces;
@using RohanSpeechApp.RazorClassLibrary
@inherits LayoutComponentBase

@inject IAuthenticationService authService

<PageTitle>RohanSpeechApp</PageTitle>

<div class="page">

    <MudThemeProvider Theme="_theme"/>
    <MudDialogProvider/>
    <MudSnackbarProvider/>

    <MudLayout>
        
        @if (authorized)
        {
            <AppBar></AppBar>

            <MudMainContent Class="mt-16 pa-5">
@*                <RohanSpeechApp.Pages._Host></RohanSpeechApp.Pages._Host>
                <RohanSpeechApp.Pages.Index></RohanSpeechApp.Pages.Index>*@
                @Body
            </MudMainContent>

        } else
        {
            <MudMainContent Class="mt-16 pa-5">
                <AuthComponent Authenticated=@AuthenticateAndSave AuthPIN=@AuthPIN></AuthComponent>
            </MudMainContent>
        }


    </MudLayout>

</div>

@code {
    private MudTheme _theme = new();

    private bool authorized = false;
    private string AuthPIN = "xxxx";

    protected override async Task OnInitializedAsync()
    {
        AuthPIN = authService.AuthPIN;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var savedPin = await authService.GetSavedAuthAsync();

            if (savedPin == AuthPIN) await Authenticate();  
        }

    }

    private async Task Authenticate()
    {
        authorized = true;

        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task AuthenticateAndSave()
    {
        await authService.SaveAuthAsync(AuthPIN);

        await Authenticate();
    }
}