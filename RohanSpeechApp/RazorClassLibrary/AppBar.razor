@using MudBlazor
@using RohanSpeechApp.Interfaces;
@using RohanSpeechApp.Models;
@implements IDisposable

@inject IGameService gameService;

<MudAppBar Elevation="4" Fixed="true" Style="height:75px;">

    <MudAvatar Class="mt-3" Image="images/rohanAvatar.jpg" Size="Size.Large"></MudAvatar>

    <div class="mt-3 mx-5 flex-column">
        <p style="color:gold; font-size:18px; height:10px;">Level @Level</p>
        <p style="color:gold; font-size:10px; height:10px;">XP: @gameService.GameData.Experience / @gameService.GetLevelTotalXP()</p>

        <MudProgressLinear Color="Color.Secondary" @bind-Value="@XPPercantage" Rounded="true" Size="Size.Medium"
        Style="width:150px;">
        </MudProgressLinear>

    </div>
    

</MudAppBar>

@code {

    private int Level = 1;
    private int XPPercantage = 0;

    protected override async Task OnInitializedAsync()
    {
        await gameService.LoadGameClassAsync();

        Level = gameService.GameData.Level;
        XPPercantage = (int)gameService.GetXPPercentage();

        gameService.XPChangedEventHandler += xpChanged;
    }

    void IDisposable.Dispose()
    {
        gameService.XPChangedEventHandler -= xpChanged;
    }


    private async void xpChanged(object? sender, GameData gameData)
    {
        Level = gameData.Level;
        XPPercantage = (int)gameService.GetXPPercentage();


        await InvokeAsync(() => this.StateHasChanged());
    }

}
