@using MudBlazor
@using RohanSpeechApp.Interfaces;
@using RohanSpeechApp.RazorClassLibrary.StageOne

@inject IJSRuntime jsRuntime;
@inject ISpeechSamplesProvider speechSamplesProvider;

<div class="mt-10">

    <MudToolBar >

        <MudSpacer></MudSpacer>

        <MudIcon Icon="@Icons.Material.Filled.KeyboardVoice" Style="height:100px; width:100px;" ></MudIcon>

        <MudSpacer></MudSpacer>
    </MudToolBar>

    <MudToolBar Class="mt-5">

        <MudSpacer></MudSpacer>

        <MudTextField @bind-Value=@TextValue Variant="Variant.Outlined" ReadOnly="true"></MudTextField>

        <MudSpacer></MudSpacer>
    </MudToolBar>


    <MudToolBar Class="mt-5">

        <MudSpacer></MudSpacer>

        <StartStopRecordingBar RecordingStartedStopped=@RecordingStartedStoppedAsync></StartStopRecordingBar>
        <MudSpacer></MudSpacer>
    </MudToolBar>
    
</div>


@code {

    protected override void OnInitialized()
    {
        TextValue = speechSamplesProvider.GetRandomSample();
    }

    public string TextValue { get; set; } = "Hello this is a random text you should say";

    private async Task RecordingStartedStoppedAsync(bool started)
    {
        if (started)
        {
            await Record();

        } else
        {
            await Stop();

            TextValue = speechSamplesProvider.GetRandomSample();
        }
    }


    private async Task Record()
    {
        await jsRuntime.InvokeVoidAsync("startRecording", TextValue);
    }

    private async Task Stop()
    {
        await jsRuntime.InvokeVoidAsync("stopRecording");
    }
}
