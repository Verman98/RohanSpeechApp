@using MudBlazor;
@using RohanSpeechApp.Interfaces;
@using RohanSpeechApp.Models;
@using RohanSpeechApp.RazorClassLibrary.StageOne

@implements IDisposable;
@inject IJSRuntime jsRuntime;
@inject ISpeechSamplesProvider speechSamplesProvider;

@inject IGameService gameService;
@inject ISnackbar snackbar;


<div class="mt-10">

    <MudToolBar >

        <MudSpacer></MudSpacer>

        <div style="display: grid;">
            <canvas id="canvas" class="visualizer" height="100" width="500" style="grid-area: 1/1;"></canvas>

            <MudIcon id="microphone" Icon="@Icons.Material.Filled.KeyboardVoice" Style="height:100px; margin-left:200px;width:100px;grid-area: 1/1;"></MudIcon>
        </div>

        <MudSpacer></MudSpacer>
    </MudToolBar>

    <MudToolBar Class="mt-5">

        <MudSpacer></MudSpacer>

        <MudTextField @bind-Value=@TextValue Variant="Variant.Outlined" ReadOnly="true"></MudTextField>

        <MudSpacer></MudSpacer>
    </MudToolBar>


    <MudToolBar Class="mt-5">

        <img id="img" height="500" width="300" style="visibility:hidden;" />

        <MudSpacer></MudSpacer>

        <StartStopRecordingBar RecordingStartedStopped=@RecordingStartedStoppedAsync></StartStopRecordingBar>
        
        <MudSpacer></MudSpacer>

        <img id="img2" height="500" width="300" style="visibility:hidden;" />

    </MudToolBar>
    
</div>


@code {

    protected override void OnInitialized()
    {
        TextValue = speechSamplesProvider.GetRandomSample();

        gameService.LevelUpEventHandler += levelUp;

    }

    void IDisposable.Dispose()
    {
        gameService.LevelUpEventHandler -= levelUp;
    }



    public string TextValue { get; set; } = "Hello this is a random text you should say";

    private async Task RecordingStartedStoppedAsync(bool started)
    {
        if (started)
        {
            await Record();

        } else
        {
            await Stop();

            TextValue = speechSamplesProvider.GetRandomSample();

            await gameService.AddXP();
        }
    }


    private async Task Record()
    {
        await jsRuntime.InvokeVoidAsync("startRecording", TextValue);
    }

    private async Task Stop()
    {
        await jsRuntime.InvokeVoidAsync("stopRecording");
    }



    private async void levelUp(object? sender, GameData gameData)
    {
        snackbar.Add("You leveled up! Great! Keep going", Severity.Success);

        await jsRuntime.InvokeVoidAsync("startAchievmentAnimation");
        await Task.Delay(4000);
        await jsRuntime.InvokeVoidAsync("stopAchievmentAnimation");

        snackbar.Clear();

    }
}
